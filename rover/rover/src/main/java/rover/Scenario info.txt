

Hi all,

As it says in the specification, here is the breakdown of marks for each scenario.
Each scenario is marked on the percentage of resources you obtain for that scenario, with 100% collection being 100% of that mark.
The exception to this is the competitive scenario, where you're marked proportionally to the number of competitors.

Scenario Mark breakdown Scenario         	Competitive           	Marks
    0 	N 	5
    1 	N 	5
    2 	N 	10
    3 	N 	10
    4 	N 	15
    5 	Y 	5
    6 	N 	15
    7 	N 	15
    8 	N 	15
    9 	 Y 	 5
 Total 	 - 	 100

 Scenarios

 Scenario 0: 20x20 map, 1x10 resources, 5000 energy, 1 rover.

 Scenario 1: 40x40 map, 5x5 resources, 5000 energy, 1 rover.

 Scenario 2: 80x80 map, 10x5 resources, 1000 energy, 3 rovers.

 Scenario 3: 100x100 map, 10x1 resources, 1000 energy, 3 rovers.

 Scenario 4: 200x200 map, 15x1 resources, 500 energy, 10 rovers.

 Scenario 5: 500x500 map, 30x2 resources, 1000 energy, 5 rovers, competitive.

 Scenario 6: 100x100 map, 10x1 resources (2 types, 50/50 split), 1000 energy, 5 rovers.

 Scenario 7: 250x250 map, 25x5 resources (2 types, 25/75 split), 1000 energy, 10 rovers.

 Scenario 8: 200x500 map, 5x15 resources (2 types, 50/50 split), 2000 energy, 10 rovers.

 Scenario 9: 750x750 map, 50x2 resources (2 types, 50/50 split), 2000 energy, 5 rovers, competitive.

 Expected mark (Ran 10 times)
 S0:
 S1:
 S2:
 S3:
 S4:
 S6:
 S7:
 S8:

 void parseMessages() {
         myMessages=messages;
         System.out.println("Rover ID: " + getID() + " ATTEMPTING TO PARSE MESSAGE");
         System.out.println("Rover ID: " + getID() + " Size of messages: " + messages.size());
         String[] messagesArray = messages.toArray(new String[messages.size()]);        //array of all received messages
         System.out.println("Rover ID: " + getID() + " Messages Array: " + messagesArray.toString());
         for (int i = 0; i < messages.size(); i++) {
             System.out.println("Rover ID: " + getID() + messagesArray[i]);
         }
             if (messages.size()!=0){
                 for (int i = 0; i < messages.size(); i++) {                                    //for all messages in array
                     List<String> message = Arrays.asList(messagesArray[i].split(","));  //convert message into string array on ,
                     String[] messageArray = message.toArray(new String[message.size()]);
                     System.out.println("Rover ID: " + getID() + " Received message: " +messagesArray[i]);
                     System.out.println("Rover ID: " + getID() + " Switch on: " + messageArray[i]);
                     switch (messageArray[0]) {                                                 //first string indicates message type

                         //format:RESOURCE,indexInt,xDouble,yDouble,typeInt
                         case "RESOURCE":
                             double resX = Double.parseDouble(messageArray[2]);
                             double resY = Double.parseDouble(messageArray[3]);
                             int resType = Integer.parseInt(messageArray[4]);
                             Point2D.Double resCoord = new Point2D.Double(resX, resY);
                             ResourceInfo resourceInfo = new ResourceInfo(resType, amountFromScenario(getScenario()), resCoord);
                             resourceMap.put(Integer.parseInt(messageArray[1]), resourceInfo);
                             break;

                         //format:"ROVER",idStr,xDouble,yDouble,intSpeed,intCapacity,doubleEnergy,intScan,intType,intScannerNo
                         case "ROVER":
                             System.out.println("Rover ID: " + getID() + " Sending Rover message " + message);
                             double rovX = Double.parseDouble(messageArray[2]);
                             double rovY = Double.parseDouble(messageArray[3]);
                             Point2D.Double rovCoord = new Point2D.Double(rovX, rovY);

                             RoverInfo roverInfo = new RoverInfo(Integer.parseInt(messageArray[4]),
                                     Integer.parseInt(messageArray[5]), Double.parseDouble(messageArray[6])
                                     , Integer.parseInt(messageArray[7]), Integer.parseInt(messageArray[8]),
                                     rovCoord,Integer.parseInt(messageArray[9]));
                             roverMap.remove(messageArray[1]);
                             roverMap.put(messageArray[1], roverInfo);
                             break;

                         //format:SCANCOMPLETE
                         case "SCANCOMPLETE":
                             scanComplete=true;
                             break;

                         //format:COLLECTED,intNumber
                         case "COLLECTED":
                             Integer resIndex =Integer.parseInt(messageArray[1]);
                             int remaining =resourceMap.get(resIndex).getAmount() - 1;
                             int type = resourceMap.get(resIndex).getType();
                             Point2D.Double location=resourceMap.get(resIndex).getCoordinate();
                             resourceMap.remove(resIndex);
                             if (remaining!=0){
                                 resourceMap.put(resIndex, new ResourceInfo(type, remaining, location)); }
                             break;

                         case"DEPLETED":
                             roverMap.remove(messageArray[1]);
                     }

                 }
                 messages.clear();

             }
             System.out.println("ID: " + getID() + "END OF PARSE REACHED");
     }

     //looks OK
     //BROADCAST TO TEAM DOES NOT SEND TO SELF, BEFORE THIS METHOD IS CALLED UPDATE ROVERS OWN RESOURCE/ROVERMAP
     void broadcastStatus() {
         //format"Rover,ID,xCo,yCo,Speed,Capacity,Energy,Scan,ResType,ScannerNo
         String message = "ROVER," +
                 getID() +
                 "," +
                 roverInfo.getRelativePosition().getX() +
                 "," +
                 roverInfo.getRelativePosition().getY() +
                 "," +
                 roverInfo.getSpeed() +
                 "," +
                 roverInfo.getCapacity() +
                 "," +
                 getEnergy() +
                 "," +
                 roverInfo.getScanRange() +
                 "," +
                 roverInfo.getResourceType()+
                 "," +
                 roverInfo.getScannerNo();
         System.out.println("Rover ID: " + getID() + " From broadcast status: " + message);
         broadCastToTeam(message);
         System.out.println("Rover ID: " + getID() + "Message broadcasted");
     }


 }